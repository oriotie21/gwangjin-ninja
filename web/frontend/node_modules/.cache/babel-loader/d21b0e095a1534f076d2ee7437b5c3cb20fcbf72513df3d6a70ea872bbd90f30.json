{"ast":null,"code":"import { createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"div\", {\n  id: \"map\",\n  class: \"col-md-8\"\n}, null, -1 /* HOISTED */);\nconst _hoisted_2 = {\n  class: \"col-md-4\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_GChart = _resolveComponent(\"GChart\");\n  const _component_b_row = _resolveComponent(\"b-row\");\n  const _component_b_container = _resolveComponent(\"b-container\");\n  return _openBlock(), _createBlock(_component_b_container, {\n    fluid: \"\"\n  }, {\n    default: _withCtx(() => [_createVNode(_component_b_row, null, {\n      default: _withCtx(() => [_hoisted_1, _createElementVNode(\"div\", _hoisted_2, [_createVNode(_component_GChart, {\n        type: \"PieChart\",\n        options: $data.options,\n        data: $data.data\n      }, null, 8 /* PROPS */, [\"options\", \"data\"])])]),\n      _: 1 /* STABLE */\n    })]),\n\n    _: 1 /* STABLE */\n  });\n}","map":{"version":3,"names":["_createElementVNode","id","class","_createBlock","_component_b_container","fluid","_createVNode","_component_b_row","_hoisted_1","_hoisted_2","_component_GChart","type","options","$data","data"],"sources":["C:\\github\\GwangJin_Ninja\\frontend\\src\\components\\Attack.vue"],"sourcesContent":["<template>\r\n  <b-container fluid>\r\n    <b-row>\r\n      <div id=\"map\" class=\"col-md-8\"></div>\r\n      <div class=\"col-md-4\">\r\n        <GChart type=\"PieChart\" :options=\"options\" :data=\"data\" />\r\n      </div>\r\n    </b-row>\r\n  </b-container>\r\n</template>\r\n\r\n<script>\r\nimport { GChart } from \"vue-google-charts\";\r\nimport L from \"leaflet\";\r\nimport \"leaflet/dist/leaflet.css\";\r\nimport \"leaflet.heat/dist/leaflet-heat.js\";\r\nimport axios from \"axios\";\r\n\r\nexport default {\r\n  name: \"AttackForm\",\r\n  components: {\r\n    GChart,\r\n  },\r\n  data() {\r\n    return {\r\n      map: null,\r\n      data: [\r\n        [\"Attack\", \"for 24 hours\"],\r\n        [\"rulebased\", 0],\r\n        [\"Benign\", 0],\r\n        [\"Bot\", 0],\r\n        [\"BruteForce_Web\", 0],\r\n        [\"BruteForce_XSS\", 0],\r\n        [\"DDOS_attack_HOIC\", 0],\r\n        [\"DDOS_attack_LOIC_UDP\", 0],\r\n        [\"DDoS_attacks_LOIC_HTTP\", 0],\r\n        [\"DoS_attacks_GoldenEye\", 0],\r\n        [\"DoS_attacks_Hulk\", 0],\r\n        [\"DoS_attacks_SlowHTTPTest\", 0],\r\n        [\"DoS_attacks_Slowloris\", 0],\r\n        [\"FTP_BruteForce\", 0],\r\n        [\"Infilteration\", 0],\r\n        [\"SQLInjection\", 0],\r\n        [\"SSH_Bruteforce\", 0],\r\n      ],\r\n      options: {\r\n        backgroundColor: \"#AFD3E2\",\r\n        width: 1000,\r\n        height: 600,\r\n        chartArea: {\r\n          width: \"90%\",\r\n          height: \"90%\",\r\n        },\r\n        legend: {\r\n          position: \"right\",\r\n          alignment: \"center\",\r\n          textStyle: {\r\n            fontSize: 20, // 글씨 크기 조정\r\n          },\r\n        },\r\n        colors: [\"#FFB6C1\", \"#C3ACD0\", \"#98FB98\", \"#FFDAB9\", \"#FFA07A\"],\r\n        pieSliceBorderColor: \"none\",\r\n        pieSliceTextStyle: {\r\n          fontSize: 20, // 데이터 레이블의 크기를 지정\r\n          bold: true,\r\n        },\r\n      },\r\n    };\r\n  },\r\n  mounted() {\r\n    this.initMap();\r\n  },\r\n  methods: {\r\n    fetchHits() {\r\n      axios\r\n        .get(\"http://localhost:8080/api/hitscsv_duration\", {\r\n          params: {\r\n            lte:\r\n              new Date(new Date().getTime() + 9 * 60 * 60 * 1000)\r\n                .toISOString()\r\n                .slice(0, 19) + \".999999+0900\",\r\n            gte:\r\n              new Date(\r\n                new Date().getTime() + 9 * 60 * 60 * 1000 - 24 * 60 * 60 * 1000\r\n              )\r\n                .toISOString()\r\n                .slice(0, 19) + \".000000+0900\",\r\n          },\r\n        })\r\n        .then((response) => {\r\n          const data = response.data; // Update the hits data in the component\r\n          data.forEach((data) => {\r\n            console.log(data._source.message.src_ip);\r\n            this.fetchCountry(data._source.message.src_ip);\r\n          });\r\n\r\n          this.hits = response.data; // Update the hits data in the component\r\n          // Calculate the total hours for \"Work\", \"Exercise\", and \"Sleep\"\r\n          let total = {\r\n            rulebased: 0,\r\n            Benign: 0,\r\n            Bot: 0,\r\n            BruteForce_Web: 0,\r\n            BruteForce_XSS: 0,\r\n            DDOS_attack_HOIC: 0,\r\n            DDOS_attack_LOIC_UDP: 0,\r\n            DDoS_attacks_LOIC_HTTP: 0,\r\n            DoS_attacks_GoldenEye: 0,\r\n            DoS_attacks_Hulk: 0,\r\n            DoS_attacks_SlowHTTPTest: 0,\r\n            DoS_attacks_Slowloris: 0,\r\n            FTP_BruteForce: 0,\r\n            Infilteration: 0,\r\n            SQLInjection: 0,\r\n            SSH_Bruteforce: 0,\r\n          };\r\n\r\n          // Iterate through hits and sum the hours for each category\r\n          this.hits.forEach((hit) => {\r\n            const label = hit._source.label;\r\n\r\n            if (label === \"Benign\") {\r\n              total.Benign += 1;\r\n            } else if (label === \"Bot\") {\r\n              total.Bot += 1;\r\n            } else if (label === \"BruteForce_Web\") {\r\n              total.BruteForce_Web += 1;\r\n            } else if (label === \"BruteForce_XSS\") {\r\n              total.BruteForce_XSS += 1;\r\n            } else if (label === \"DDOS_attack_HOIC\") {\r\n              total.DDOS_attack_HOIC += 1;\r\n            } else if (label === \"DDOS_attack_LOIC_UDP\") {\r\n              total.DDOS_attack_LOIC_UDP += 1;\r\n            } else if (label === \"DDoS_attacks_LOIC_HTTP\") {\r\n              total.DDoS_attacks_LOIC_HTTP += 1;\r\n            } else if (label === \"DoS_attacks_GoldenEye\") {\r\n              total.DoS_attacks_GoldenEye += 1;\r\n            } else if (label === \"DoS_attacks_Hulk\") {\r\n              total.DoS_attacks_Hulk += 1;\r\n            } else if (label === \"DoS_attacks_SlowHTTPTest\") {\r\n              total.DoS_attacks_SlowHTTPTest += 1;\r\n            } else if (label === \"DoS_attacks_Slowloris\") {\r\n              total.DoS_attacks_Slowloris += 1;\r\n            } else if (label === \"FTP_BruteForce\") {\r\n              total.FTP_BruteForce += 1;\r\n            } else if (label === \"Infilteration\") {\r\n              total.Infilteration += 1;\r\n            } else if (label === \"SQLInjection\") {\r\n              total.SQLInjection += 1;\r\n            } else if (label === \"SSH_Bruteforce\") {\r\n              total.SSH_Bruteforce += 1;\r\n            }\r\n          });\r\n\r\n          // Update the data array with updated hour values\r\n          for (let i = 1; i < this.data.length; i++) {\r\n            const attack = Object.keys(total)[i - 1];\r\n            this.data[i][1] = total[attack];\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.error(error);\r\n        });\r\n    },\r\n    initMap() {\r\n      // Leaflet 지도 인스턴스 생성\r\n      this.map = L.map(\"map\", {\r\n        center: [30, 156],\r\n        zoom: 1.5,\r\n        minZoom: 1.5, // 최소 확대 범위 설정\r\n        maxZoom: 10, // 최대 확대 범위 설정\r\n        maxBounds: L.latLngBounds(L.latLng(90, 180), L.latLng(-90, -180)),\r\n      });\r\n\r\n      // Leaflet 타일 레이어 추가 (OpenStreetMap 사용)\r\n      L.tileLayer(\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\", {\r\n        attribution: \"Map data &copy; OpenStreetMap contributors\",\r\n        maxZoom: 18,\r\n      }).addTo(this.map);\r\n    },\r\n    fetchCountry(ipAddress) {\r\n      axios\r\n        .post(\"http://localhost:8080/api/ipcountry\", { ipAddress })\r\n        .then((response) => {\r\n          const { latitude, longitude } = response.data;\r\n          console.log(\"Latitude:\", latitude);\r\n          console.log(\"Longitude:\", longitude);\r\n\r\n          L.heatLayer([[latitude, longitude, 200]], {\r\n            radius: 15,\r\n          }).addTo(this.map);\r\n        })\r\n        .catch((error) => {\r\n          console.error(error);\r\n        });\r\n    },\r\n  },\r\n  created() {\r\n    this.fetchHits();\r\n  },\r\n  computed: {},\r\n};\r\n</script>\r\n\r\n<style>\r\n#map {\r\n  width: 1000px;\r\n  height: 600px;\r\n}\r\n</style>\r\n"],"mappings":";gCAGMA,mBAAA,CAAqC;EAAhCC,EAAE,EAAC,KAAK;EAACC,KAAK,EAAC;;;EACfA,KAAK,EAAC;AAAU;;;;;uBAHzBC,YAAA,CAOcC,sBAAA;IAPDC,KAAK,EAAL;EAAK;sBAChB,MAKQ,CALRC,YAAA,CAKQC,gBAAA;wBAJN,MAAqC,CAArCC,UAAqC,EACrCR,mBAAA,CAEM,OAFNS,UAEM,GADJH,YAAA,CAA0DI,iBAAA;QAAlDC,IAAI,EAAC,UAAU;QAAEC,OAAO,EAAEC,KAAA,CAAAD,OAAO;QAAGE,IAAI,EAAED,KAAA,CAAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}