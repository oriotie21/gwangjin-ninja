{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { Bar } from \"vue-chartjs\";\nimport { Chart as ChartJS, Title, Tooltip, Legend, BarElement, CategoryScale, LinearScale } from \"chart.js\";\nChartJS.register(Title, Tooltip, Legend, BarElement, CategoryScale, LinearScale);\nexport default {\n  name: \"BarChart\",\n  components: {\n    Bar\n  },\n  data() {\n    const generateDateLabels = () => {\n      const months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n      const currentDate = new Date(new Date().getTime() + 9 * 60 * 60 * 1000);\n      const currentYear = currentDate.getFullYear();\n      const currentMonth = currentDate.getMonth();\n      const labels = [];\n      for (let i = 11; i >= 0; i--) {\n        const monthIndex = (currentMonth + 12 - i) % 12;\n        const month = months[monthIndex];\n        const year = currentYear - Math.floor((currentMonth + 12 - i) / 12);\n        const label = `${month} ${year}`;\n        labels.push(label);\n      }\n      return labels;\n    };\n    const generateRandomData = () => {\n      const data = [];\n      for (let i = 0; i < 12; i++) {\n        const randomNumber = Math.floor(Math.random() * 51); // 0부터 50사이의 난수 생성\n        data.push(randomNumber);\n      }\n      return data;\n    };\n    return {\n      chartData: {\n        labels: generateDateLabels(),\n        datasets: [{\n          label: \"Benign\",\n          data: generateRandomData(),\n          backgroundColor: \"#DBDFEA\"\n        }, {\n          label: \"Bot\",\n          data: generateRandomData(),\n          backgroundColor: \"#ACB1D6\"\n        }, {\n          label: \"BruteForce_Web\",\n          data: generateRandomData(),\n          backgroundColor: \"#8294C4\"\n        }, {\n          label: \"BruteForce_XSS\",\n          data: generateRandomData(),\n          backgroundColor: \"#DBDFEA\"\n        }, {\n          label: \"DDOS_attack_HOIC\",\n          data: generateRandomData(),\n          backgroundColor: \"#ACB1D6\"\n        }, {\n          label: \"DDOS_attack_LOIC_UDP\",\n          data: generateRandomData(),\n          backgroundColor: \"#8294C4\"\n        }, {\n          label: \"DDoS_attacks_LOIC_HTTP\",\n          data: generateRandomData(),\n          backgroundColor: \"#DBDFEA\"\n        }, {\n          label: \"DoS_attacks_GoldenEye\",\n          data: generateRandomData(),\n          backgroundColor: \"#ACB1D6\"\n        }, {\n          label: \"DoS_attacks_Hulk\",\n          data: generateRandomData(),\n          backgroundColor: \"#8294C4\"\n        }, {\n          label: \"DoS_attacks_SlowHTTPTest\",\n          data: generateRandomData(),\n          backgroundColor: \"#DBDFEA\"\n        }, {\n          label: \"DoS_attacks_Slowloris\",\n          data: generateRandomData(),\n          backgroundColor: \"#ACB1D6\"\n        }, {\n          label: \"FTP_BruteForce\",\n          data: generateRandomData(),\n          backgroundColor: \"#8294C4\"\n        }, {\n          label: \"Infilteration\",\n          data: generateRandomData(),\n          backgroundColor: \"#DBDFEA\"\n        }, {\n          label: \"SQLInjection\",\n          data: generateRandomData(),\n          backgroundColor: \"#ACB1D6\"\n        }, {\n          label: \"SSH_Bruteforce\",\n          data: generateRandomData(),\n          backgroundColor: \"#8294C4\"\n        }]\n      },\n      chartOptions: {\n        responsive: true,\n        type: \"barStacked\",\n        stacked: true,\n        grouped: false,\n        scales: {\n          x: {\n            //position: \"top\",\n          }\n        }\n      }\n    };\n  },\n  methods: {\n    fetchHits(minusmonth) {\n      axios.get(\"http://localhost:8080/api/hitscsv_duration\", {\n        params: {\n          lte: new Date.setMonth(new Date().getMonth() - minusmonth).toISOString().slice(0, 8) + \"31T23:59:59.999999+0900\",\n          gte: new Date.setMonth(new Date().getMonth() - minusmonth).toISOString().slice(0, 8) + \"01T00:00:00.000000+0900\"\n        }\n      }).then(response => {\n        this.hits = response.data; // Update the hits data in the component\n      }).catch(error => {\n        console.error(error);\n      });\n    }\n  }\n};","map":{"version":3,"names":["Bar","Chart","ChartJS","Title","Tooltip","Legend","BarElement","CategoryScale","LinearScale","register","name","components","data","generateDateLabels","months","currentDate","Date","getTime","currentYear","getFullYear","currentMonth","getMonth","labels","i","monthIndex","month","year","Math","floor","label","push","generateRandomData","randomNumber","random","chartData","datasets","backgroundColor","chartOptions","responsive","type","stacked","grouped","scales","x","methods","fetchHits","minusmonth","axios","get","params","lte","setMonth","toISOString","slice","gte","then","response","hits","catch","error","console"],"sources":["C:\\github\\GwangJin_Ninja\\frontend\\src\\components\\Barchart.vue"],"sourcesContent":["<template>\r\n  <Bar\r\n    id=\"my-chart-id\"\r\n    :options=\"chartOptions\"\r\n    :data=\"chartData\"\r\n    :height=\"60\"\r\n  />\r\n</template>\r\n\r\n<script>\r\nimport { Bar } from \"vue-chartjs\";\r\nimport {\r\n  Chart as ChartJS,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n  BarElement,\r\n  CategoryScale,\r\n  LinearScale,\r\n} from \"chart.js\";\r\n\r\nChartJS.register(\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n  BarElement,\r\n  CategoryScale,\r\n  LinearScale\r\n);\r\n\r\nexport default {\r\n  name: \"BarChart\",\r\n  components: { Bar },\r\n  data() {\r\n    const generateDateLabels = () => {\r\n      const months = [\r\n        \"January\",\r\n        \"February\",\r\n        \"March\",\r\n        \"April\",\r\n        \"May\",\r\n        \"June\",\r\n        \"July\",\r\n        \"August\",\r\n        \"September\",\r\n        \"October\",\r\n        \"November\",\r\n        \"December\",\r\n      ];\r\n\r\n      const currentDate = new Date(new Date().getTime() + 9 * 60 * 60 * 1000);\r\n      const currentYear = currentDate.getFullYear();\r\n      const currentMonth = currentDate.getMonth();\r\n\r\n      const labels = [];\r\n      for (let i = 11; i >= 0; i--) {\r\n        const monthIndex = (currentMonth + 12 - i) % 12;\r\n        const month = months[monthIndex];\r\n        const year = currentYear - Math.floor((currentMonth + 12 - i) / 12);\r\n        const label = `${month} ${year}`;\r\n        labels.push(label);\r\n      }\r\n      return labels;\r\n    };\r\n\r\n    const generateRandomData = () => {\r\n      const data = [];\r\n      for (let i = 0; i < 12; i++) {\r\n        const randomNumber = Math.floor(Math.random() * 51); // 0부터 50사이의 난수 생성\r\n        data.push(randomNumber);\r\n      }\r\n      return data;\r\n    };\r\n\r\n    return {\r\n      chartData: {\r\n        labels: generateDateLabels(),\r\n        datasets: [\r\n          {\r\n            label: \"Benign\",\r\n            data: generateRandomData(),\r\n            backgroundColor: \"#DBDFEA\",\r\n          },\r\n          {\r\n            label: \"Bot\",\r\n            data: generateRandomData(),\r\n            backgroundColor: \"#ACB1D6\",\r\n          },\r\n          {\r\n            label: \"BruteForce_Web\",\r\n            data: generateRandomData(),\r\n            backgroundColor: \"#8294C4\",\r\n          },\r\n          {\r\n            label: \"BruteForce_XSS\",\r\n            data: generateRandomData(),\r\n            backgroundColor: \"#DBDFEA\",\r\n          },\r\n          {\r\n            label: \"DDOS_attack_HOIC\",\r\n            data: generateRandomData(),\r\n            backgroundColor: \"#ACB1D6\",\r\n          },\r\n          {\r\n            label: \"DDOS_attack_LOIC_UDP\",\r\n            data: generateRandomData(),\r\n            backgroundColor: \"#8294C4\",\r\n          },\r\n          {\r\n            label: \"DDoS_attacks_LOIC_HTTP\",\r\n            data: generateRandomData(),\r\n            backgroundColor: \"#DBDFEA\",\r\n          },\r\n          {\r\n            label: \"DoS_attacks_GoldenEye\",\r\n            data: generateRandomData(),\r\n            backgroundColor: \"#ACB1D6\",\r\n          },\r\n          {\r\n            label: \"DoS_attacks_Hulk\",\r\n            data: generateRandomData(),\r\n            backgroundColor: \"#8294C4\",\r\n          },\r\n          {\r\n            label: \"DoS_attacks_SlowHTTPTest\",\r\n            data: generateRandomData(),\r\n            backgroundColor: \"#DBDFEA\",\r\n          },\r\n          {\r\n            label: \"DoS_attacks_Slowloris\",\r\n            data: generateRandomData(),\r\n            backgroundColor: \"#ACB1D6\",\r\n          },\r\n          {\r\n            label: \"FTP_BruteForce\",\r\n            data: generateRandomData(),\r\n            backgroundColor: \"#8294C4\",\r\n          },\r\n          {\r\n            label: \"Infilteration\",\r\n            data: generateRandomData(),\r\n            backgroundColor: \"#DBDFEA\",\r\n          },\r\n          {\r\n            label: \"SQLInjection\",\r\n            data: generateRandomData(),\r\n            backgroundColor: \"#ACB1D6\",\r\n          },\r\n          {\r\n            label: \"SSH_Bruteforce\",\r\n            data: generateRandomData(),\r\n            backgroundColor: \"#8294C4\",\r\n          },\r\n        ],\r\n      },\r\n      chartOptions: {\r\n        responsive: true,\r\n        type: \"barStacked\",\r\n        stacked: true,\r\n        grouped: false,\r\n        scales: {\r\n          x: {\r\n            //position: \"top\",\r\n          },\r\n        },\r\n      },\r\n    };\r\n  },\r\n  methods: {\r\n    fetchHits(minusmonth) {\r\n      axios\r\n        .get(\"http://localhost:8080/api/hitscsv_duration\", {\r\n          params: {\r\n            lte:\r\n              new Date.setMonth(new Date().getMonth() - minusmonth)\r\n                .toISOString()\r\n                .slice(0, 8) + \"31T23:59:59.999999+0900\",\r\n            gte:\r\n              new Date.setMonth(new Date().getMonth() - minusmonth)\r\n                .toISOString()\r\n                .slice(0, 8) + \"01T00:00:00.000000+0900\",\r\n          },\r\n        })\r\n        .then((response) => {\r\n          this.hits = response.data; // Update the hits data in the component\r\n        })\r\n        .catch((error) => {\r\n          console.error(error);\r\n        });\r\n    },\r\n  },\r\n};\r\n</script>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}