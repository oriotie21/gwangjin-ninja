{"ast":null,"code":"import { GChart } from \"vue-google-charts\";\nimport L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport \"leaflet.heat/dist/leaflet-heat.js\";\nimport axios from \"axios\";\nexport default {\n  name: \"AttackForm\",\n  components: {\n    GChart\n  },\n  mounted() {\n    this.initMap();\n  },\n  methods: {\n    fetchCoordinates() {\n      const ipAddress = \"8.8.8.8\"; // Replace with the IP address you want to geolocate\n\n      const apiKey = \"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\"; // Replace with your actual GeoIP API key\n\n      const apiUrl = `https://api.geoip.com/v2/ip/${ipAddress}`; // Construct the API endpoint URL\n\n      axios.get(apiUrl, {\n        headers: {\n          Authorization: `Bearer ${apiKey}` // Pass your API key in the Authorization header\n        }\n      }).then(response => {\n        const {\n          latitude,\n          longitude\n        } = response.data;\n\n        // Create a marker and add it to the map\n        L.marker([39, -77]).addTo(this.map);\n\n        // Optional: Center the map on the marker's location\n        this.map.setView([latitude, longitude], 10);\n      }).catch(error => {\n        console.error(error);\n      });\n    },\n    initMap() {\n      // Leaflet 지도 인스턴스 생성\n      const map = L.map(\"map\", {\n        center: [30, 156],\n        zoom: 1.5,\n        minZoom: 1.5,\n        // 최소 확대 범위 설정\n        maxZoom: 10,\n        // 최대 확대 범위 설정\n        maxBounds: L.latLngBounds(L.latLng(90, 330),\n        // 왼쪽 상단 경계 좌표\n        L.latLng(-90, -30) // 오른쪽 하단 경계 좌표\n        )\n      });\n\n      // Leaflet 타일 레이어 추가 (OpenStreetMap 사용)\n      L.tileLayer(\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\", {\n        attribution: \"Map data &copy; OpenStreetMap contributors\",\n        maxZoom: 18\n      }).addTo(map);\n\n      // Leaflet.heat 라이브러리를 사용하여 히트맵 레이어 추가\n      const heatLayer = L.heatLayer([[33, 126, 10000], [37.7749, 242.4194, 5000]],\n      // 히트맵 데이터 ([위도, 경도, 가중치] 형식)\n      {\n        radius: 25\n      } // 히트맵 스타일 및 옵션\n      ).addTo(map);\n      setTimeout(function () {\n        map.addLayer(heatLayer);\n      }, 500);\n      this.map = map;\n      this.fetchCoordinates();\n    },\n    fetchHits() {\n      axios.get(\"http://localhost:8080/api/hitscsv\").then(response => {\n        this.hits = response.data; // Update the hits data in the component\n        // Calculate the total hours for \"Work\", \"Exercise\", and \"Sleep\"\n        let total = {\n          Benign: 0,\n          Attack2: 0,\n          Attack3: 0\n        };\n\n        // Iterate through hits and sum the hours for each category\n        this.hits.forEach(hit => {\n          const label = hit._source.label;\n          if (label === \"Benign\") {\n            total.Benign += 1;\n          } else if (label === \"Attack2\") {\n            total.Exercise += 1;\n          } else if (label === \"Attack3\") {\n            total.Sleep += 1;\n          }\n          console.log(label); // Output label value to the browser console\n        });\n\n        // Update the data array with updated hour values\n        this.data[1][1] = total.Benign;\n        this.data[2][1] = total.Attack2;\n        this.data[3][1] = total.Attack3;\n      }).catch(error => {\n        console.error(error);\n      });\n    }\n  },\n  data() {\n    return {\n      hits: [],\n      // Initialize the hits data\n      data: [[\"Attack\", \"Today\"], [\"Benign\", 0], [\"Attack2\", 0], [\"Attack3\", 0]],\n      options: {\n        backgroundColor: \"#AFD3E2\",\n        width: 1000,\n        height: 600,\n        chartArea: {\n          width: \"90%\",\n          height: \"90%\"\n        },\n        legend: {\n          position: \"right\",\n          alignment: \"center\",\n          textStyle: {\n            fontSize: 20 // 글씨 크기 조정\n          }\n        },\n\n        colors: [\"#FFB6C1\", \"#C3ACD0\", \"#98FB98\", \"#FFDAB9\", \"#FFA07A\"],\n        pieSliceBorderColor: \"none\",\n        pieSliceTextStyle: {\n          fontSize: 20,\n          // 데이터 레이블의 크기를 지정\n          bold: true\n        }\n      },\n      map: null\n    };\n  },\n  created() {\n    this.fetchHits(); // Call the fetchHits method when the component is created\n  },\n\n  computed: {}\n};","map":{"version":3,"names":["GChart","L","axios","name","components","mounted","initMap","methods","fetchCoordinates","ipAddress","apiKey","apiUrl","get","headers","Authorization","then","response","latitude","longitude","data","marker","addTo","map","setView","catch","error","console","center","zoom","minZoom","maxZoom","maxBounds","latLngBounds","latLng","tileLayer","attribution","heatLayer","radius","setTimeout","addLayer","fetchHits","hits","total","Benign","Attack2","Attack3","forEach","hit","label","_source","Exercise","Sleep","log","options","backgroundColor","width","height","chartArea","legend","position","alignment","textStyle","fontSize","colors","pieSliceBorderColor","pieSliceTextStyle","bold","created","computed"],"sources":["C:\\github\\GwangJin_Ninja\\frontend\\src\\components\\Attack.vue"],"sourcesContent":["<template>\r\n  <b-container fluid>\r\n    <b-row>\r\n      <div id=\"map\" class=\"col-md-8\"></div>\r\n      <div class=\"col-md-4\">\r\n        <GChart type=\"PieChart\" :options=\"options\" :data=\"data\" />\r\n      </div>\r\n    </b-row>\r\n  </b-container>\r\n</template>\r\n\r\n<script>\r\nimport { GChart } from \"vue-google-charts\";\r\nimport L from \"leaflet\";\r\nimport \"leaflet/dist/leaflet.css\";\r\nimport \"leaflet.heat/dist/leaflet-heat.js\";\r\nimport axios from \"axios\";\r\n\r\nexport default {\r\n  name: \"AttackForm\",\r\n  components: {\r\n    GChart,\r\n  },\r\n  mounted() {\r\n    this.initMap();\r\n  },\r\n\r\n  methods: {\r\n    fetchCoordinates() {\r\n      const ipAddress = \"8.8.8.8\"; // Replace with the IP address you want to geolocate\r\n\r\n      const apiKey = \"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\"; // Replace with your actual GeoIP API key\r\n\r\n      const apiUrl = `https://api.geoip.com/v2/ip/${ipAddress}`; // Construct the API endpoint URL\r\n\r\n      axios\r\n        .get(apiUrl, {\r\n          headers: {\r\n            Authorization: `Bearer ${apiKey}`, // Pass your API key in the Authorization header\r\n          },\r\n        })\r\n        .then((response) => {\r\n          const { latitude, longitude } = response.data;\r\n\r\n          // Create a marker and add it to the map\r\n          L.marker([39, -77]).addTo(this.map);\r\n\r\n          // Optional: Center the map on the marker's location\r\n          this.map.setView([latitude, longitude], 10);\r\n        })\r\n        .catch((error) => {\r\n          console.error(error);\r\n        });\r\n    },\r\n    initMap() {\r\n      // Leaflet 지도 인스턴스 생성\r\n      const map = L.map(\"map\", {\r\n        center: [30, 156],\r\n        zoom: 1.5,\r\n        minZoom: 1.5, // 최소 확대 범위 설정\r\n        maxZoom: 10, // 최대 확대 범위 설정\r\n        maxBounds: L.latLngBounds(\r\n          L.latLng(90, 330), // 왼쪽 상단 경계 좌표\r\n          L.latLng(-90, -30) // 오른쪽 하단 경계 좌표\r\n        ),\r\n      });\r\n\r\n      // Leaflet 타일 레이어 추가 (OpenStreetMap 사용)\r\n      L.tileLayer(\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\", {\r\n        attribution: \"Map data &copy; OpenStreetMap contributors\",\r\n        maxZoom: 18,\r\n      }).addTo(map);\r\n\r\n      // Leaflet.heat 라이브러리를 사용하여 히트맵 레이어 추가\r\n      const heatLayer = L.heatLayer(\r\n        [\r\n          [33, 126, 10000],\r\n          [37.7749, 242.4194, 5000],\r\n        ], // 히트맵 데이터 ([위도, 경도, 가중치] 형식)\r\n        { radius: 25 } // 히트맵 스타일 및 옵션\r\n      ).addTo(map);\r\n\r\n      setTimeout(function () {\r\n        map.addLayer(heatLayer);\r\n      }, 500);\r\n\r\n      this.map = map;\r\n      this.fetchCoordinates();\r\n    },\r\n    fetchHits() {\r\n      axios\r\n        .get(\"http://localhost:8080/api/hitscsv\")\r\n        .then((response) => {\r\n          this.hits = response.data; // Update the hits data in the component\r\n          // Calculate the total hours for \"Work\", \"Exercise\", and \"Sleep\"\r\n          let total = {\r\n            Benign: 0,\r\n            Attack2: 0,\r\n            Attack3: 0,\r\n          };\r\n\r\n          // Iterate through hits and sum the hours for each category\r\n          this.hits.forEach((hit) => {\r\n            const label = hit._source.label;\r\n\r\n            if (label === \"Benign\") {\r\n              total.Benign += 1;\r\n            } else if (label === \"Attack2\") {\r\n              total.Exercise += 1;\r\n            } else if (label === \"Attack3\") {\r\n              total.Sleep += 1;\r\n            }\r\n            console.log(label); // Output label value to the browser console\r\n          });\r\n\r\n          // Update the data array with updated hour values\r\n          this.data[1][1] = total.Benign;\r\n          this.data[2][1] = total.Attack2;\r\n          this.data[3][1] = total.Attack3;\r\n        })\r\n        .catch((error) => {\r\n          console.error(error);\r\n        });\r\n    },\r\n  },\r\n  data() {\r\n    return {\r\n      hits: [], // Initialize the hits data\r\n      data: [\r\n        [\"Attack\", \"Today\"],\r\n        [\"Benign\", 0],\r\n        [\"Attack2\", 0],\r\n        [\"Attack3\", 0],\r\n      ],\r\n      options: {\r\n        backgroundColor: \"#AFD3E2\",\r\n        width: 1000,\r\n        height: 600,\r\n        chartArea: {\r\n          width: \"90%\",\r\n          height: \"90%\",\r\n        },\r\n        legend: {\r\n          position: \"right\",\r\n          alignment: \"center\",\r\n          textStyle: {\r\n            fontSize: 20, // 글씨 크기 조정\r\n          },\r\n        },\r\n        colors: [\"#FFB6C1\", \"#C3ACD0\", \"#98FB98\", \"#FFDAB9\", \"#FFA07A\"],\r\n        pieSliceBorderColor: \"none\",\r\n        pieSliceTextStyle: {\r\n          fontSize: 20, // 데이터 레이블의 크기를 지정\r\n          bold: true,\r\n        },\r\n      },\r\n      map: null,\r\n    };\r\n  },\r\n  created() {\r\n    this.fetchHits(); // Call the fetchHits method when the component is created\r\n  },\r\n  computed: {},\r\n};\r\n</script>\r\n\r\n<style>\r\n#map {\r\n  width: 1000px;\r\n  height: 600px;\r\n}\r\n</style>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}