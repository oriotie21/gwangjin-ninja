{"ast":null,"code":"import axios from \"axios\";\nexport default {\n  name: \"TrafficForm\",\n  data() {\n    return {\n      hits: [],\n      // Initialize the hits data\n      startDatetime: \"\",\n      endDatetime: \"\"\n    };\n  },\n  created() {\n    this.fetchHits(); // Call the fetchHits method when the component is created\n  },\n\n  computed: {\n    filteredHitsWithoutMissingSrcIp() {\n      return this.hits.filter(hit => hit._source.message.src_ip);\n    }\n  },\n  methods: {\n    fetchHits() {\n      axios.get(\"http://localhost:8080/api/hitsjson\").then(response => {\n        this.hits = response.data; // Update the hits data in the component\n      }).catch(error => {\n        console.error(error);\n      });\n    },\n    fetchHitsDuration() {\n      axios.get(\"http://localhost:8080/api/hitsjson_duration\", {\n        params: {\n          lte: this.endDatetime + \":59.999999+0900\",\n          gte: this.startDatetime + \":00.000000+0900\"\n        }\n      }).then(response => {\n        const newHits = response.data; // Get the new hits data\n        this.hits = newHits; // Update the hits data in the component\n\n        // Call $nextTick to ensure the table is updated after the data is updated\n        this.$nextTick(() => {\n          this.updateTable();\n        });\n      }).catch(error => {\n        console.error(error);\n      });\n    },\n    generateItems() {\n      this.fetchHitsDuration();\n    },\n    updateTable() {\n      // Clear the existing table rows\n      const tableBody = document.querySelector(\"#traffic-table tbody\");\n      tableBody.innerHTML = \"\";\n\n      // Create and append new rows with the updated hits data\n      const fragment = document.createDocumentFragment();\n      this.hits.forEach(hit => {\n        const row = document.createElement(\"tr\");\n        if (hit._source.message.event_type === \"drop\") {\n          row.classList.add(\"table-drop\");\n        } else if (hit._source.message.event_type === \"alert\") {\n          row.classList.add(\"table-alert\");\n        }\n        const timestampCell = document.createElement(\"td\");\n        timestampCell.textContent = hit._source.message.timestamp;\n        row.appendChild(timestampCell);\n        const srcIpCell = document.createElement(\"td\");\n        srcIpCell.textContent = hit._source.message.src_ip;\n        row.appendChild(srcIpCell);\n        const destIpCell = document.createElement(\"td\");\n        destIpCell.textContent = hit._source.message.dest_ip;\n        row.appendChild(destIpCell);\n        const protoCell = document.createElement(\"td\");\n        protoCell.textContent = hit._source.message.proto;\n        row.appendChild(protoCell);\n        const srcPortCell = document.createElement(\"td\");\n        srcPortCell.textContent = hit._source.message.src_port;\n        row.appendChild(srcPortCell);\n        const destPortCell = document.createElement(\"td\");\n        destPortCell.textContent = hit._source.message.dest_port;\n        row.appendChild(destPortCell);\n        fragment.appendChild(row);\n      });\n      tableBody.appendChild(fragment);\n    }\n  }\n};","map":{"version":3,"names":["axios","name","data","hits","startDatetime","endDatetime","created","fetchHits","computed","filteredHitsWithoutMissingSrcIp","filter","hit","_source","message","src_ip","methods","get","then","response","catch","error","console","fetchHitsDuration","params","lte","gte","newHits","$nextTick","updateTable","generateItems","tableBody","document","querySelector","innerHTML","fragment","createDocumentFragment","forEach","row","createElement","event_type","classList","add","timestampCell","textContent","timestamp","appendChild","srcIpCell","destIpCell","dest_ip","protoCell","proto","srcPortCell","src_port","destPortCell","dest_port"],"sources":["C:\\github\\GwangJin_Ninja\\frontend\\src\\components\\Traffic.vue"],"sourcesContent":["<template>\r\n  <div\r\n    class=\"d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom\"\r\n  >\r\n    <h1 class=\"h2\" style=\"font-weight: bold\">Traffic Table</h1>\r\n    <div class=\"btn-toolbar mb-2 mb-md-0\">\r\n      <div class=\"btn-group me-2\">\r\n        <input type=\"datetime-local\" v-model=\"startDatetime\" />\r\n        <span style=\"padding: 8px\">to</span>\r\n        <input type=\"datetime-local\" v-model=\"endDatetime\" />\r\n        <button\r\n          type=\"button\"\r\n          class=\"btn btn-sm btn-primary\"\r\n          @click=\"generateItems()\"\r\n          style=\"background-color: #146c94\"\r\n        >\r\n          Search\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <table class=\"table table-striped table-bordered\">\r\n    <thead>\r\n      <tr>\r\n        <th>Timestamp</th>\r\n        <th>Source IP</th>\r\n        <th>Dest IP</th>\r\n        <th>Protocol</th>\r\n        <!-- <th>Length</th> -->\r\n        <th>Source Port</th>\r\n        <th>Dest Port</th>\r\n      </tr>\r\n    </thead>\r\n    <tbody>\r\n      <tr\r\n        v-for=\"(hit, index) in filteredHitsWithoutMissingSrcIp\"\r\n        :key=\"index\"\r\n        :class=\"{\r\n          'table-drop': hit._source.message.event_type === 'drop',\r\n          'table-alert': hit._source.message.event_type === 'alert',\r\n        }\"\r\n      >\r\n        <td>{{ hit._source.message.timestamp }}</td>\r\n        <td>{{ hit._source.message.src_ip }}</td>\r\n        <td>{{ hit._source.message.dest_ip }}</td>\r\n        <td>{{ hit._source.message.proto }}</td>\r\n        <!-- <td>{{ hit._source.message.flow }}</td> -->\r\n        <td>{{ hit._source.message.src_port }}</td>\r\n        <td>{{ hit._source.message.dest_port }}</td>\r\n      </tr>\r\n    </tbody>\r\n  </table>\r\n</template>\r\n\r\n<script>\r\nimport axios from \"axios\";\r\nexport default {\r\n  name: \"TrafficForm\",\r\n  data() {\r\n    return {\r\n      hits: [], // Initialize the hits data\r\n      startDatetime: \"\",\r\n      endDatetime: \"\",\r\n    };\r\n  },\r\n  created() {\r\n    this.fetchHits(); // Call the fetchHits method when the component is created\r\n  },\r\n  computed: {\r\n    filteredHitsWithoutMissingSrcIp() {\r\n      return this.hits.filter((hit) => hit._source.message.src_ip);\r\n    },\r\n  },\r\n  methods: {\r\n    fetchHits() {\r\n      axios\r\n        .get(\"http://localhost:8080/api/hitsjson\")\r\n        .then((response) => {\r\n          this.hits = response.data; // Update the hits data in the component\r\n        })\r\n        .catch((error) => {\r\n          console.error(error);\r\n        });\r\n    },\r\n    fetchHitsDuration() {\r\n      axios\r\n        .get(\"http://localhost:8080/api/hitsjson_duration\", {\r\n          params: {\r\n            lte: this.endDatetime + \":59.999999+0900\",\r\n            gte: this.startDatetime + \":00.000000+0900\",\r\n          },\r\n        })\r\n        .then((response) => {\r\n          const newHits = response.data; // Get the new hits data\r\n          this.hits = newHits; // Update the hits data in the component\r\n\r\n          // Call $nextTick to ensure the table is updated after the data is updated\r\n          this.$nextTick(() => {\r\n            this.updateTable();\r\n          });\r\n        })\r\n        .catch((error) => {\r\n          console.error(error);\r\n        });\r\n    },\r\n    generateItems() {\r\n      this.fetchHitsDuration();\r\n    },\r\n    updateTable() {\r\n      // Clear the existing table rows\r\n      const tableBody = document.querySelector(\"#traffic-table tbody\");\r\n      tableBody.innerHTML = \"\";\r\n\r\n      // Create and append new rows with the updated hits data\r\n      const fragment = document.createDocumentFragment();\r\n      this.hits.forEach((hit) => {\r\n        const row = document.createElement(\"tr\");\r\n        if (hit._source.message.event_type === \"drop\") {\r\n          row.classList.add(\"table-drop\");\r\n        } else if (hit._source.message.event_type === \"alert\") {\r\n          row.classList.add(\"table-alert\");\r\n        }\r\n\r\n        const timestampCell = document.createElement(\"td\");\r\n        timestampCell.textContent = hit._source.message.timestamp;\r\n        row.appendChild(timestampCell);\r\n\r\n        const srcIpCell = document.createElement(\"td\");\r\n        srcIpCell.textContent = hit._source.message.src_ip;\r\n        row.appendChild(srcIpCell);\r\n\r\n        const destIpCell = document.createElement(\"td\");\r\n        destIpCell.textContent = hit._source.message.dest_ip;\r\n        row.appendChild(destIpCell);\r\n\r\n        const protoCell = document.createElement(\"td\");\r\n        protoCell.textContent = hit._source.message.proto;\r\n        row.appendChild(protoCell);\r\n\r\n        const srcPortCell = document.createElement(\"td\");\r\n        srcPortCell.textContent = hit._source.message.src_port;\r\n        row.appendChild(srcPortCell);\r\n\r\n        const destPortCell = document.createElement(\"td\");\r\n        destPortCell.textContent = hit._source.message.dest_port;\r\n        row.appendChild(destPortCell);\r\n\r\n        fragment.appendChild(row);\r\n      });\r\n\r\n      tableBody.appendChild(fragment);\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style>\r\n.table-drop {\r\n  background-color: red;\r\n}\r\n.table-alert {\r\n  background-color: yellow;\r\n}\r\n</style>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}