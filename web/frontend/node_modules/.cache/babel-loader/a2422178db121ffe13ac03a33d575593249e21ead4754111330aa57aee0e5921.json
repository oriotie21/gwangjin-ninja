{"ast":null,"code":"import { GChart } from \"vue-google-charts\";\nimport L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport \"leaflet.heat/dist/leaflet-heat.js\";\nimport axios from \"axios\";\nexport default {\n  name: \"AttackForm\",\n  components: {\n    GChart\n  },\n  data() {\n    return {\n      map: null,\n      data: [[\"Attack\", \"Today\"], [\"Benign\", 0], [\"Attack2\", 0], [\"Attack3\", 0]],\n      options: {\n        backgroundColor: \"#AFD3E2\",\n        width: 1000,\n        height: 600,\n        chartArea: {\n          width: \"90%\",\n          height: \"90%\"\n        },\n        legend: {\n          position: \"right\",\n          alignment: \"center\",\n          textStyle: {\n            fontSize: 20 // 글씨 크기 조정\n          }\n        },\n\n        colors: [\"#FFB6C1\", \"#C3ACD0\", \"#98FB98\", \"#FFDAB9\", \"#FFA07A\"],\n        pieSliceBorderColor: \"none\",\n        pieSliceTextStyle: {\n          fontSize: 20,\n          // 데이터 레이블의 크기를 지정\n          bold: true\n        }\n      }\n    };\n  },\n  mounted() {\n    this.initMap();\n  },\n  methods: {\n    fetchHits() {\n      axios.get(\"http://localhost:8080/api/hitscsv\").then(response => {\n        this.hits = response.data; // Update the hits data in the component\n        // Calculate the total hours for \"Work\", \"Exercise\", and \"Sleep\"\n        let total = {\n          Benign: 0,\n          Attack2: 0,\n          Attack3: 0\n        };\n\n        // Iterate through hits and sum the hours for each category\n        this.hits.forEach(hit => {\n          const label = hit._source.label;\n          if (label === \"Benign\") {\n            total.Benign += 1;\n          } else if (label === \"Attack2\") {\n            total.Exercise += 1;\n          } else if (label === \"Attack3\") {\n            total.Sleep += 1;\n          }\n          console.log(label); // Output label value to the browser console\n        });\n\n        // Update the data array with updated hour values\n        this.data[1][1] = total.Benign;\n        this.data[2][1] = total.Attack2;\n        this.data[3][1] = total.Attack3;\n      }).catch(error => {\n        console.error(error);\n      });\n    },\n    initMap() {\n      // Leaflet 지도 인스턴스 생성\n      this.map = L.map(\"map\", {\n        center: [30, 156],\n        zoom: 1.5,\n        minZoom: 1.5,\n        // 최소 확대 범위 설정\n        maxZoom: 10,\n        // 최대 확대 범위 설정\n        maxBounds: L.latLngBounds(L.latLng(90, 360), L.latLng(-90, 0))\n      });\n\n      // Leaflet 타일 레이어 추가 (OpenStreetMap 사용)\n      L.tileLayer(\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\", {\n        attribution: \"Map data &copy; OpenStreetMap contributors\",\n        maxZoom: 18\n      }).addTo(this.map);\n    },\n    fetchHitsJson() {\n      axios.get(\"http://localhost:8080/api/hitsjson\").then(response => {\n        const data = response.data; // Update the hits data in the component\n        data.forEach(data => {\n          console.log(data._source.message.src_ip);\n          this.fetchCountry(data._source.message.src_ip);\n        });\n      }).catch(error => {\n        console.error(error);\n      });\n    },\n    fetchCountry(ipAddress) {\n      axios.post(\"http://localhost:8080/api/ipcountry\", {\n        ipAddress\n      }).then(response => {\n        const {\n          latitude,\n          longitude\n        } = response.data;\n        console.log(\"Latitude:\", latitude);\n        console.log(\"Longitude:\", longitude);\n        L.heatLayer([[latitude, longitude, 500]], {\n          radius: 150\n        }).addTo(this.map);\n      }).catch(error => {\n        console.error(error);\n      });\n    }\n  },\n  created() {\n    this.fetchHits(); // Call the fetchHits method when the component is created\n    this.fetchHitsJson();\n  },\n  computed: {}\n};","map":{"version":3,"names":["GChart","L","axios","name","components","data","map","options","backgroundColor","width","height","chartArea","legend","position","alignment","textStyle","fontSize","colors","pieSliceBorderColor","pieSliceTextStyle","bold","mounted","initMap","methods","fetchHits","get","then","response","hits","total","Benign","Attack2","Attack3","forEach","hit","label","_source","Exercise","Sleep","console","log","catch","error","center","zoom","minZoom","maxZoom","maxBounds","latLngBounds","latLng","tileLayer","attribution","addTo","fetchHitsJson","message","src_ip","fetchCountry","ipAddress","post","latitude","longitude","heatLayer","radius","created","computed"],"sources":["C:\\github\\GwangJin_Ninja\\frontend\\src\\components\\Attack.vue"],"sourcesContent":["<template>\r\n  <b-container fluid>\r\n    <b-row>\r\n      <div id=\"map\" class=\"col-md-8\"></div>\r\n      <div class=\"col-md-4\">\r\n        <GChart type=\"PieChart\" :options=\"options\" :data=\"data\" />\r\n      </div>\r\n    </b-row>\r\n  </b-container>\r\n</template>\r\n\r\n<script>\r\nimport { GChart } from \"vue-google-charts\";\r\nimport L from \"leaflet\";\r\nimport \"leaflet/dist/leaflet.css\";\r\nimport \"leaflet.heat/dist/leaflet-heat.js\";\r\nimport axios from \"axios\";\r\n\r\nexport default {\r\n  name: \"AttackForm\",\r\n  components: {\r\n    GChart,\r\n  },\r\n  data() {\r\n    return {\r\n      map: null,\r\n      data: [\r\n        [\"Attack\", \"Today\"],\r\n        [\"Benign\", 0],\r\n        [\"Attack2\", 0],\r\n        [\"Attack3\", 0],\r\n      ],\r\n      options: {\r\n        backgroundColor: \"#AFD3E2\",\r\n        width: 1000,\r\n        height: 600,\r\n        chartArea: {\r\n          width: \"90%\",\r\n          height: \"90%\",\r\n        },\r\n        legend: {\r\n          position: \"right\",\r\n          alignment: \"center\",\r\n          textStyle: {\r\n            fontSize: 20, // 글씨 크기 조정\r\n          },\r\n        },\r\n        colors: [\"#FFB6C1\", \"#C3ACD0\", \"#98FB98\", \"#FFDAB9\", \"#FFA07A\"],\r\n        pieSliceBorderColor: \"none\",\r\n        pieSliceTextStyle: {\r\n          fontSize: 20, // 데이터 레이블의 크기를 지정\r\n          bold: true,\r\n        },\r\n      },\r\n    };\r\n  },\r\n  mounted() {\r\n    this.initMap();\r\n  },\r\n  methods: {\r\n    fetchHits() {\r\n      axios\r\n        .get(\"http://localhost:8080/api/hitscsv\")\r\n        .then((response) => {\r\n          this.hits = response.data; // Update the hits data in the component\r\n          // Calculate the total hours for \"Work\", \"Exercise\", and \"Sleep\"\r\n          let total = {\r\n            Benign: 0,\r\n            Attack2: 0,\r\n            Attack3: 0,\r\n          };\r\n\r\n          // Iterate through hits and sum the hours for each category\r\n          this.hits.forEach((hit) => {\r\n            const label = hit._source.label;\r\n\r\n            if (label === \"Benign\") {\r\n              total.Benign += 1;\r\n            } else if (label === \"Attack2\") {\r\n              total.Exercise += 1;\r\n            } else if (label === \"Attack3\") {\r\n              total.Sleep += 1;\r\n            }\r\n            console.log(label); // Output label value to the browser console\r\n          });\r\n\r\n          // Update the data array with updated hour values\r\n          this.data[1][1] = total.Benign;\r\n          this.data[2][1] = total.Attack2;\r\n          this.data[3][1] = total.Attack3;\r\n        })\r\n        .catch((error) => {\r\n          console.error(error);\r\n        });\r\n    },\r\n    initMap() {\r\n      // Leaflet 지도 인스턴스 생성\r\n      this.map = L.map(\"map\", {\r\n        center: [30, 156],\r\n        zoom: 1.5,\r\n        minZoom: 1.5, // 최소 확대 범위 설정\r\n        maxZoom: 10, // 최대 확대 범위 설정\r\n        maxBounds: L.latLngBounds(L.latLng(90, 360), L.latLng(-90, 0)),\r\n      });\r\n\r\n      // Leaflet 타일 레이어 추가 (OpenStreetMap 사용)\r\n      L.tileLayer(\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\", {\r\n        attribution: \"Map data &copy; OpenStreetMap contributors\",\r\n        maxZoom: 18,\r\n      }).addTo(this.map);\r\n    },\r\n    fetchHitsJson() {\r\n      axios\r\n        .get(\"http://localhost:8080/api/hitsjson\")\r\n        .then((response) => {\r\n          const data = response.data; // Update the hits data in the component\r\n          data.forEach((data) => {\r\n            console.log(data._source.message.src_ip);\r\n            this.fetchCountry(data._source.message.src_ip);\r\n          });\r\n        })\r\n        .catch((error) => {\r\n          console.error(error);\r\n        });\r\n    },\r\n    fetchCountry(ipAddress) {\r\n      axios\r\n        .post(\"http://localhost:8080/api/ipcountry\", { ipAddress })\r\n        .then((response) => {\r\n          const { latitude, longitude } = response.data;\r\n          console.log(\"Latitude:\", latitude);\r\n          console.log(\"Longitude:\", longitude);\r\n\r\n          L.heatLayer([[latitude, longitude, 500]], {\r\n            radius: 150,\r\n          }).addTo(this.map);\r\n        })\r\n        .catch((error) => {\r\n          console.error(error);\r\n        });\r\n    },\r\n  },\r\n  created() {\r\n    this.fetchHits(); // Call the fetchHits method when the component is created\r\n    this.fetchHitsJson();\r\n  },\r\n  computed: {},\r\n};\r\n</script>\r\n\r\n<style>\r\n#map {\r\n  width: 1000px;\r\n  height: 600px;\r\n}\r\n</style>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}