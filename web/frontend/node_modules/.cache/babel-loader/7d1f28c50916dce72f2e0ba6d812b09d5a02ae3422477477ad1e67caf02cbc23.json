{"ast":null,"code":"import { GChart } from \"vue-google-charts\";\nimport L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport \"leaflet.heat/dist/leaflet-heat.js\";\nimport axios from \"axios\";\nexport default {\n  name: \"AttackForm\",\n  components: {\n    GChart\n  },\n  data() {\n    return {\n      map: null,\n      data: [[\"Attack\", \"for 24 hours\"], [\"rulebased\", 0], [\"Benign\", 0], [\"Bot\", 0], [\"BruteForce_Web\", 0], [\"BruteForce_XSS\", 0], [\"DDOS_attack_HOIC\", 0], [\"DDOS_attack_LOIC_UDP\", 0], [\"DDoS_attacks_LOIC_HTTP\", 0], [\"DoS_attacks_GoldenEye\", 0], [\"DoS_attacks_Hulk\", 0], [\"DoS_attacks_SlowHTTPTest\", 0], [\"DoS_attacks_Slowloris\", 0], [\"FTP_BruteForce\", 0], [\"Infilteration\", 0], [\"SQLInjection\", 0], [\"SSH_Bruteforce\", 0]],\n      options: {\n        backgroundColor: \"#AFD3E2\",\n        width: 1000,\n        height: 600,\n        chartArea: {\n          width: \"90%\",\n          height: \"90%\"\n        },\n        legend: {\n          position: \"right\",\n          alignment: \"center\",\n          textStyle: {\n            fontSize: 20 // 글씨 크기 조정\n          }\n        },\n\n        colors: [\"#FFB6C1\", \"#C3ACD0\", \"#98FB98\", \"#FFDAB9\", \"#FFA07A\"],\n        pieSliceBorderColor: \"none\",\n        pieSliceTextStyle: {\n          fontSize: 20,\n          // 데이터 레이블의 크기를 지정\n          bold: true\n        }\n      }\n    };\n  },\n  mounted() {\n    this.initMap();\n  },\n  methods: {\n    fetchHits() {\n      axios.get(\"http://localhost:8080/api/hitscsv_duration\", {\n        params: {\n          lte: new Date(new Date().getTime() + 9 * 60 * 60 * 1000).toISOString().slice(0, 19) + \".999999+0900\",\n          gte: new Date(new Date().getTime() + 9 * 60 * 60 * 1000 - 24 * 60 * 60 * 1000).toISOString().slice(0, 19) + \".000000+0900\"\n        }\n      }).then(response => {\n        const data = response.data; // Update the hits data in the component\n        data.forEach(data => {\n          console.log(data._source.message.src_ip);\n          this.fetchCountry(data._source.message.src_ip);\n        });\n        this.hits = response.data; // Update the hits data in the component\n        // Calculate the total hours for \"Work\", \"Exercise\", and \"Sleep\"\n        let total = {\n          Benign: 0,\n          Bot: 0,\n          BruteForce_Web: 0,\n          BruteForce_XSS: 0,\n          DDOS_attack_HOIC: 0,\n          DDOS_attack_LOIC_UDP: 0,\n          DDoS_attacks_LOIC_HTTP: 0,\n          DoS_attacks_GoldenEye: 0,\n          DoS_attacks_Hulk: 0,\n          DoS_attacks_SlowHTTPTest: 0,\n          DoS_attacks_Slowloris: 0,\n          FTP_BruteForce: 0,\n          Infilteration: 0,\n          SQLInjection: 0,\n          SSH_Bruteforce: 0\n        };\n\n        // Iterate through hits and sum the hours for each category\n        this.hits.forEach(hit => {\n          const label = hit._source.label;\n          if (label === \"Benign\") {\n            total.Benign += 1;\n          } else if (label === \"Bot\") {\n            total.Bot += 1;\n          } else if (label === \"BruteForce_Web\") {\n            total.BruteForce_Web += 1;\n          } else if (label === \"BruteForce_XSS\") {\n            total.BruteForce_XSS += 1;\n          } else if (label === \"DDOS_attack_HOIC\") {\n            total.DDOS_attack_HOIC += 1;\n          } else if (label === \"DDOS_attack_LOIC_UDP\") {\n            total.DDOS_attack_LOIC_UDP += 1;\n          } else if (label === \"DDoS_attacks_LOIC_HTTP\") {\n            total.DDoS_attacks_LOIC_HTTP += 1;\n          } else if (label === \"DoS_attacks_GoldenEye\") {\n            total.DoS_attacks_GoldenEye += 1;\n          } else if (label === \"DoS_attacks_Hulk\") {\n            total.DoS_attacks_Hulk += 1;\n          } else if (label === \"DoS_attacks_SlowHTTPTest\") {\n            total.DoS_attacks_SlowHTTPTest += 1;\n          } else if (label === \"DoS_attacks_Slowloris\") {\n            total.DoS_attacks_Slowloris += 1;\n          } else if (label === \"FTP_BruteForce\") {\n            total.FTP_BruteForce += 1;\n          } else if (label === \"Infilteration\") {\n            total.Infilteration += 1;\n          } else if (label === \"SQLInjection\") {\n            total.SQLInjection += 1;\n          } else if (label === \"SSH_Bruteforce\") {\n            total.SSH_Bruteforce += 1;\n          }\n        });\n\n        // Update the data array with updated hour values\n        for (let i = 1; i < this.data.length; i++) {\n          const attack = Object.keys(total)[i - 1];\n          this.data[i + 1][1] = total[attack];\n        }\n      }).catch(error => {\n        console.error(error);\n      });\n    },\n    fetchHitsJson() {\n      axios.get(\"http://localhost:8080/api/hitsjson_duration\", {\n        params: {\n          lte: new Date(new Date().getTime() + 9 * 60 * 60 * 1000).toISOString().slice(0, 19) + \".999999+0900\",\n          gte: new Date(new Date().getTime() + 9 * 60 * 60 * 1000 - 24 * 60 * 60 * 1000).toISOString().slice(0, 19) + \".000000+0900\"\n        }\n      }).then(response => {\n        const data = response.data;\n        data.forEach(data => {\n          console.log(data._source.message.src_ip);\n          this.fetchCountry(data._source.message.src_ip);\n        });\n        this.hitsjson = response.data;\n        // Calculate the total hours for \"Work\", \"Exercise\", and \"Sleep\"\n        let total = {\n          rulebased: 0\n        };\n        this.hitsjson.forEach(hit => {\n          total.rulebased += 1;\n        });\n        this.data[1][1] = total[0];\n      }).catch(error => {\n        console.error(error);\n      });\n    },\n    initMap() {\n      // Leaflet 지도 인스턴스 생성\n      this.map = L.map(\"map\", {\n        center: [30, 156],\n        zoom: 1.5,\n        minZoom: 1.5,\n        // 최소 확대 범위 설정\n        maxZoom: 10,\n        // 최대 확대 범위 설정\n        maxBounds: L.latLngBounds(L.latLng(90, 180), L.latLng(-90, -180))\n      });\n\n      // Leaflet 타일 레이어 추가 (OpenStreetMap 사용)\n      L.tileLayer(\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\", {\n        attribution: \"Map data &copy; OpenStreetMap contributors\",\n        maxZoom: 18\n      }).addTo(this.map);\n    },\n    fetchCountry(ipAddress) {\n      axios.post(\"http://localhost:8080/api/ipcountry\", {\n        ipAddress\n      }).then(response => {\n        const {\n          latitude,\n          longitude\n        } = response.data;\n        console.log(\"Latitude:\", latitude);\n        console.log(\"Longitude:\", longitude);\n        L.heatLayer([[latitude, longitude, 200]], {\n          radius: 15\n        }).addTo(this.map);\n      }).catch(error => {\n        console.error(error);\n      });\n    }\n  },\n  created() {\n    this.fetchHits();\n    this.fetchHitsJson();\n  },\n  computed: {}\n};","map":{"version":3,"names":["GChart","L","axios","name","components","data","map","options","backgroundColor","width","height","chartArea","legend","position","alignment","textStyle","fontSize","colors","pieSliceBorderColor","pieSliceTextStyle","bold","mounted","initMap","methods","fetchHits","get","params","lte","Date","getTime","toISOString","slice","gte","then","response","forEach","console","log","_source","message","src_ip","fetchCountry","hits","total","Benign","Bot","BruteForce_Web","BruteForce_XSS","DDOS_attack_HOIC","DDOS_attack_LOIC_UDP","DDoS_attacks_LOIC_HTTP","DoS_attacks_GoldenEye","DoS_attacks_Hulk","DoS_attacks_SlowHTTPTest","DoS_attacks_Slowloris","FTP_BruteForce","Infilteration","SQLInjection","SSH_Bruteforce","hit","label","i","length","attack","Object","keys","catch","error","fetchHitsJson","hitsjson","rulebased","center","zoom","minZoom","maxZoom","maxBounds","latLngBounds","latLng","tileLayer","attribution","addTo","ipAddress","post","latitude","longitude","heatLayer","radius","created","computed"],"sources":["C:\\github\\GwangJin_Ninja\\frontend\\src\\components\\Attack.vue"],"sourcesContent":["<template>\r\n  <b-container fluid>\r\n    <b-row>\r\n      <div id=\"map\" class=\"col-md-8\"></div>\r\n      <div class=\"col-md-4\">\r\n        <GChart type=\"PieChart\" :options=\"options\" :data=\"data\" />\r\n      </div>\r\n    </b-row>\r\n  </b-container>\r\n</template>\r\n\r\n<script>\r\nimport { GChart } from \"vue-google-charts\";\r\nimport L from \"leaflet\";\r\nimport \"leaflet/dist/leaflet.css\";\r\nimport \"leaflet.heat/dist/leaflet-heat.js\";\r\nimport axios from \"axios\";\r\n\r\nexport default {\r\n  name: \"AttackForm\",\r\n  components: {\r\n    GChart,\r\n  },\r\n  data() {\r\n    return {\r\n      map: null,\r\n      data: [\r\n        [\"Attack\", \"for 24 hours\"],\r\n        [\"rulebased\", 0],\r\n        [\"Benign\", 0],\r\n        [\"Bot\", 0],\r\n        [\"BruteForce_Web\", 0],\r\n        [\"BruteForce_XSS\", 0],\r\n        [\"DDOS_attack_HOIC\", 0],\r\n        [\"DDOS_attack_LOIC_UDP\", 0],\r\n        [\"DDoS_attacks_LOIC_HTTP\", 0],\r\n        [\"DoS_attacks_GoldenEye\", 0],\r\n        [\"DoS_attacks_Hulk\", 0],\r\n        [\"DoS_attacks_SlowHTTPTest\", 0],\r\n        [\"DoS_attacks_Slowloris\", 0],\r\n        [\"FTP_BruteForce\", 0],\r\n        [\"Infilteration\", 0],\r\n        [\"SQLInjection\", 0],\r\n        [\"SSH_Bruteforce\", 0],\r\n      ],\r\n      options: {\r\n        backgroundColor: \"#AFD3E2\",\r\n        width: 1000,\r\n        height: 600,\r\n        chartArea: {\r\n          width: \"90%\",\r\n          height: \"90%\",\r\n        },\r\n        legend: {\r\n          position: \"right\",\r\n          alignment: \"center\",\r\n          textStyle: {\r\n            fontSize: 20, // 글씨 크기 조정\r\n          },\r\n        },\r\n        colors: [\"#FFB6C1\", \"#C3ACD0\", \"#98FB98\", \"#FFDAB9\", \"#FFA07A\"],\r\n        pieSliceBorderColor: \"none\",\r\n        pieSliceTextStyle: {\r\n          fontSize: 20, // 데이터 레이블의 크기를 지정\r\n          bold: true,\r\n        },\r\n      },\r\n    };\r\n  },\r\n  mounted() {\r\n    this.initMap();\r\n  },\r\n  methods: {\r\n    fetchHits() {\r\n      axios\r\n        .get(\"http://localhost:8080/api/hitscsv_duration\", {\r\n          params: {\r\n            lte:\r\n              new Date(new Date().getTime() + 9 * 60 * 60 * 1000)\r\n                .toISOString()\r\n                .slice(0, 19) + \".999999+0900\",\r\n            gte:\r\n              new Date(\r\n                new Date().getTime() + 9 * 60 * 60 * 1000 - 24 * 60 * 60 * 1000\r\n              )\r\n                .toISOString()\r\n                .slice(0, 19) + \".000000+0900\",\r\n          },\r\n        })\r\n        .then((response) => {\r\n          const data = response.data; // Update the hits data in the component\r\n          data.forEach((data) => {\r\n            console.log(data._source.message.src_ip);\r\n            this.fetchCountry(data._source.message.src_ip);\r\n          });\r\n\r\n          this.hits = response.data; // Update the hits data in the component\r\n          // Calculate the total hours for \"Work\", \"Exercise\", and \"Sleep\"\r\n          let total = {\r\n            Benign: 0,\r\n            Bot: 0,\r\n            BruteForce_Web: 0,\r\n            BruteForce_XSS: 0,\r\n            DDOS_attack_HOIC: 0,\r\n            DDOS_attack_LOIC_UDP: 0,\r\n            DDoS_attacks_LOIC_HTTP: 0,\r\n            DoS_attacks_GoldenEye: 0,\r\n            DoS_attacks_Hulk: 0,\r\n            DoS_attacks_SlowHTTPTest: 0,\r\n            DoS_attacks_Slowloris: 0,\r\n            FTP_BruteForce: 0,\r\n            Infilteration: 0,\r\n            SQLInjection: 0,\r\n            SSH_Bruteforce: 0,\r\n          };\r\n\r\n          // Iterate through hits and sum the hours for each category\r\n          this.hits.forEach((hit) => {\r\n            const label = hit._source.label;\r\n\r\n            if (label === \"Benign\") {\r\n              total.Benign += 1;\r\n            } else if (label === \"Bot\") {\r\n              total.Bot += 1;\r\n            } else if (label === \"BruteForce_Web\") {\r\n              total.BruteForce_Web += 1;\r\n            } else if (label === \"BruteForce_XSS\") {\r\n              total.BruteForce_XSS += 1;\r\n            } else if (label === \"DDOS_attack_HOIC\") {\r\n              total.DDOS_attack_HOIC += 1;\r\n            } else if (label === \"DDOS_attack_LOIC_UDP\") {\r\n              total.DDOS_attack_LOIC_UDP += 1;\r\n            } else if (label === \"DDoS_attacks_LOIC_HTTP\") {\r\n              total.DDoS_attacks_LOIC_HTTP += 1;\r\n            } else if (label === \"DoS_attacks_GoldenEye\") {\r\n              total.DoS_attacks_GoldenEye += 1;\r\n            } else if (label === \"DoS_attacks_Hulk\") {\r\n              total.DoS_attacks_Hulk += 1;\r\n            } else if (label === \"DoS_attacks_SlowHTTPTest\") {\r\n              total.DoS_attacks_SlowHTTPTest += 1;\r\n            } else if (label === \"DoS_attacks_Slowloris\") {\r\n              total.DoS_attacks_Slowloris += 1;\r\n            } else if (label === \"FTP_BruteForce\") {\r\n              total.FTP_BruteForce += 1;\r\n            } else if (label === \"Infilteration\") {\r\n              total.Infilteration += 1;\r\n            } else if (label === \"SQLInjection\") {\r\n              total.SQLInjection += 1;\r\n            } else if (label === \"SSH_Bruteforce\") {\r\n              total.SSH_Bruteforce += 1;\r\n            }\r\n          });\r\n\r\n          // Update the data array with updated hour values\r\n          for (let i = 1; i < this.data.length; i++) {\r\n            const attack = Object.keys(total)[i - 1];\r\n            this.data[i + 1][1] = total[attack];\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.error(error);\r\n        });\r\n    },\r\n    fetchHitsJson() {\r\n      axios\r\n        .get(\"http://localhost:8080/api/hitsjson_duration\", {\r\n          params: {\r\n            lte:\r\n              new Date(new Date().getTime() + 9 * 60 * 60 * 1000)\r\n                .toISOString()\r\n                .slice(0, 19) + \".999999+0900\",\r\n            gte:\r\n              new Date(\r\n                new Date().getTime() + 9 * 60 * 60 * 1000 - 24 * 60 * 60 * 1000\r\n              )\r\n                .toISOString()\r\n                .slice(0, 19) + \".000000+0900\",\r\n          },\r\n        })\r\n        .then((response) => {\r\n          const data = response.data;\r\n          data.forEach((data) => {\r\n            console.log(data._source.message.src_ip);\r\n            this.fetchCountry(data._source.message.src_ip);\r\n          });\r\n\r\n          this.hitsjson = response.data;\r\n          // Calculate the total hours for \"Work\", \"Exercise\", and \"Sleep\"\r\n          let total = {\r\n            rulebased: 0,\r\n          };\r\n\r\n          this.hitsjson.forEach((hit) => {\r\n            total.rulebased += 1;\r\n          });\r\n\r\n          this.data[1][1] = total[0];\r\n        })\r\n        .catch((error) => {\r\n          console.error(error);\r\n        });\r\n    },\r\n    initMap() {\r\n      // Leaflet 지도 인스턴스 생성\r\n      this.map = L.map(\"map\", {\r\n        center: [30, 156],\r\n        zoom: 1.5,\r\n        minZoom: 1.5, // 최소 확대 범위 설정\r\n        maxZoom: 10, // 최대 확대 범위 설정\r\n        maxBounds: L.latLngBounds(L.latLng(90, 180), L.latLng(-90, -180)),\r\n      });\r\n\r\n      // Leaflet 타일 레이어 추가 (OpenStreetMap 사용)\r\n      L.tileLayer(\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\", {\r\n        attribution: \"Map data &copy; OpenStreetMap contributors\",\r\n        maxZoom: 18,\r\n      }).addTo(this.map);\r\n    },\r\n    fetchCountry(ipAddress) {\r\n      axios\r\n        .post(\"http://localhost:8080/api/ipcountry\", { ipAddress })\r\n        .then((response) => {\r\n          const { latitude, longitude } = response.data;\r\n          console.log(\"Latitude:\", latitude);\r\n          console.log(\"Longitude:\", longitude);\r\n\r\n          L.heatLayer([[latitude, longitude, 200]], {\r\n            radius: 15,\r\n          }).addTo(this.map);\r\n        })\r\n        .catch((error) => {\r\n          console.error(error);\r\n        });\r\n    },\r\n  },\r\n  created() {\r\n    this.fetchHits();\r\n    this.fetchHitsJson();\r\n  },\r\n  computed: {},\r\n};\r\n</script>\r\n\r\n<style>\r\n#map {\r\n  width: 1000px;\r\n  height: 600px;\r\n}\r\n</style>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}